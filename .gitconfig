[user]
	email = josepablov@gmail.com
	name = Sleepful
[credential]
	helper = /usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret
[alias]
	br = !git for-each-ref --sort=committerdate refs/heads --format='%(color:bold)%(align:15)%(HEAD)%(color:yellow)%(refname:short)%(end)%(align:20)%(color:bold green)%(committerdate:relative)%(end)%(color:magenta)%(authorname)\n%(color:blue)%(subject)\n%(color:reset)' --color=always|column -ts'|'
	amend = commit --amend -m
	p = push
	pushb = push -u origin HEAD
  pushf = push --force-with-lease
	a = add
	au = add -u
	aa = add -A .
	c = commit
	cm = commit -m
	st = status
	unstage = restore --staged
	co = checkout
	cob = checkout -b
	logf = log --stat
	logl = log -p
	logo = log --oneline
	fetcha = fetch --all
	pulla = pull --all
  pwd = branch --show-current
  cls = "!cls(){ git check-ignore $(ls); }; cls"
	clonesub = clone --recurse-submodules -j8
	# checkout new branch with commit message:
	# conew BRANCHNAME commit-msg
	conew = "!conew(){ git checkout -b \"$1\" && git commit --allow-empty -m \"$2\" && git push -u origin HEAD; }; conew"
	# delete branch from local and remote
	# delbr BRANCHNAME
	delbr = "!delbr(){ git branch -D \"$1\" && git push -d origin \"$1\"; }; delbr"
	fixup = commit --fixup=HEAD
  # HEAD is going to get squashed
  # HEAD~ is the one that gets squashed into
  # HEAD~~ is the base for the rebase, the non_inclusive limit to the rebase 
	refixup = rebase --autosquash -i HEAD~~
	refu = -c sequence.editor=: rebase --autosquash -i HEAD~~
	uncommit = reset --soft HEAD~
	tracked = ls-tree --full-tree -r --name-only HEAD
	rebaseprev = rebase --autosquash -i HEAD~~
  # used to look at SHAs, e.g. g parse HEAD^
  parse = rev-parse
  # useful to edit with vimf
  m = ls-files -m
  # changed files from last commit
  prev = !git --no-pager diff --name-only HEAD^ 
  ignore-file = update-index --skip-worktree
  unignore-file = update-index --no-skip-worktree
[core]
	hooksPath = ~/.githooks/
[github]
	user = Sleepful
[pull]
	rebase = false
[init]
	defaultBranch = main
[status]
	submoduleSummary = true
